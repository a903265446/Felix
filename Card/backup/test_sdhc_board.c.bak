/*
 * Copyright (c) 2013 - 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdint.h>

#include "fsl_gpio_hal.h"
#include "fsl_port_hal.h"


//static volatile uint32_t g_sdInsertedFlag = 0;
GPIO_Type * const g_gpioBase[GPIO_INSTANCE_COUNT] = GPIO_BASE_PTRS;
PORT_Type * const g_portBase[PORT_INSTANCE_COUNT] = PORT_BASE_PTRS;
const IRQn_Type g_portIrqId[PORT_INSTANCE_COUNT] = PORT_IRQS;

#define CD_USING_GPIO

#if defined CD_USING_GPIO

#if defined TWR_K64F120M
#define SDHC_CD_GPIO_PORT GPIOB_IDX
#define SDHC_CD_GPIO_PIN  20
#define SDHC_D3_PORT      GPIOE_IDX
#define SDHC_D3_PIN       4
#endif /* TWR_K64F120M */

#if defined TWR_K60D100M
#define SDHC_CD_GPIO_PORT GPIOE_IDX
#define SDHC_CD_GPIO_PIN  28
#define SDHC_D3_PORT      GPIOE_IDX
#define SDHC_D3_PIN       4
#endif /* TWR_K60F120M */

#endif /* CD_USING_GPIO */

#if defined CD_USING_GPIO

void PORT_IRQHandler(PORT_Type *base)
{
    if(PORT_HAL_GetPortIntFlag(base) == (1<<SDHC_CD_GPIO_PIN))
    {
        //sdhc_cd_irqhandler();
        if (GPIO_HAL_ReadPinInput(g_gpioBase[SDHC_CD_GPIO_PORT], SDHC_CD_GPIO_PIN))
#if defined FRDM_K64F
            detectCardInserted();
        else
            detectCardRemoved();
#elif defined TWR_K64F120M || defined TWR_K60D100M || defined TWR_K21F120M || defined TWR_K65F180M 
        || defined TWR_K80F150M
            detectCardRemoved();
        else
            detectCardInserted();
        //notifyCardDetectEvent();
#else
#error unknown board
#endif
    }
    /* Clear interrupt flag.*/
    PORT_HAL_ClearPortIntFlag(base);
}

#if (PORT_INSTANCE_COUNT >= 1)
void PORTA_IRQHandler(void)
{
    PORT_IRQHandler(PORTA);
}
#endif 

#if (PORT_INSTANCE_COUNT >= 2)
void PORTB_IRQHandler()
{
    PORT_IRQHandler(PORTB);
}  
#endif

#if (PORT_INSTANCE_COUNT >= 3)
void PORTC_IRQHandler()
{
    PORT_IRQHandler(PORTC);
}  
#endif

#if (PORT_INSTANCE_COUNT >= 4)
void PORTD_IRQHandler()
{
    PORT_IRQHandler(PORTD);
}  
#endif

#if (PORT_INSTANCE_COUNT >= 5)
void PORTE_IRQHandler()
{
    PORT_IRQHandler(PORTE);
}  
#endif

#endif /* CD_USING_GPIO */


static void set_sdhc_pin_mux()
{
    PORT_Type * portBase = g_portBase[SDHC_D3_PORT];
    uint32_t instance = 0;

    configure_sdhc_pins(instance);

#if defined (CD_USING_DAT3) || defined (CD_USING_POLL_DAT3)
    PORT_HAL_SetMuxMode(portBase, SDHC_D3_PIN, kPortMuxAlt4);
    PORT_HAL_SetPullCmd(portBase, SDHC_D3_PIN, true);
    PORT_HAL_SetDriveStrengthMode(PORTE, SDHC_D3_PIN, kPortHighDriveStrength);
#else
    PORT_HAL_SetMuxMode(portBase, SDHC_D3_PIN, kPortMuxAlt4);
    PORT_HAL_SetPullMode(portBase, SDHC_D3_PIN, kPortPullUp);
    PORT_HAL_SetPullCmd(portBase, SDHC_D3_PIN, true);
    PORT_HAL_SetDriveStrengthMode(portBase, SDHC_D3_PIN, kPortHighDriveStrength);

#elif defined CD_USING_GPIO
    // Set card detect pin as gpio.
    PORT_HAL_SetMuxMode(portBase, SDHC_CD_GPIO_PIN, kPortMuxAsGpio);
    // Set card detect pin as digital input.
    GPIO_HAL_SetPinDir(gpioBase, SDHC_CD_GPIO_PIN, kGpioDigitalInput);

    // Configure GPIO type card detect pin features. 
#if FSL_FEATURE_PORT_HAS_PULL_ENABLE
    PORT_HAL_SetPullCmd(portBase, SDHC_CD_GPIO_PIN, true);
#endif 

#if FSL_FEATURE_PORT_HAS_PULL_SELECTION

#if defined FRDM_K64F
    PORT_HAL_SetPullMode(portBase, SDHC_CD_GPIO_PIN, kPortPullDown);
#elif defined TWR_K64F120M || defined TWR_K60D100M || defined TWR_K21F120M || defined TWR_K65F180M 
        || defined TWR_K80F150M
    PORT_HAL_SetPullMode(portBase, SDHC_CD_GPIO_PIN, kPortPullUp);
#endif

#endif /* FSL_FEATURE_PORT_HAS_PULL_SELECTION */

#if FSL_FEATURE_GPIO_HAS_INTERRUPT_VECTOR
    PORT_HAL_SetPinIntMode(portBase, SDHC_CD_GPIO_PIN, kPortIntEitherEdge);
    // Configure NVIC 
        // Enable GPIO interrupt.
    INT_SYS_EnableIRQ(g_portIrqId[SDHC_CD_GPIO_PORT]);
#endif

#endif /* CD_USING_GPIO */
} 

void init_sdhc_hardware(void)
{
    GPIO_Type * gpioBase = g_gpioBase[SDHC_CD_GPIO_PORT];
    PORT_Type * portBase = g_portBase[SDHC_CD_GPIO_PORT];

    MPU->CESR &= (uint32_t) ~(0x1); /* Disable MPU */

    hardware_init();

    set_sdhc_pin_mux();
    
}
